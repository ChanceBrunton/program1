/**
* Web worker: an object of this class executes in its own new thread
* to receive and respond to a single HTTP request. After the constructor
* the object executes on its "run" method, and leaves when it is done.
*
* One WebWorker object is only responsible for one client connection. 
* This code uses Java threads to parallelize the handling of clients:
* each WebWorker runs in its own thread. This means that you can essentially
* just think about what is happening on one client at a time, ignoring 
* the fact that the entirety of the webserver execution might be handling
* other clients, too. 
*
* This WebWorker class (i.e., an object of this class) is where all the
* client interaction is done. The "run()" method is the beginning -- think
* of it as the "main()" for a client interaction. It does three things in
* a row, invoking three methods in this class: it reads the incoming HTTP
* request; it writes out an HTTP header to begin its response, and then it
* writes out some HTML content for the response content. HTTP requests and
* responses are just lines of text (in a very particular format). 
*
**/

import java.net.Socket;
import java.lang.Runnable;
import java.io.*;
import java.util.Date;
import java.text.DateFormat;
import java.util.TimeZone;
import java.lang.String;
import java.util.Calendar;
import java.nio.file.*;

public class WebWorker implements Runnable
{

private Socket socket;

/**
* Constructor: must have a valid open socket
**/
public WebWorker(Socket s)
{
   socket = s;
}

/**
* Worker thread starting point. Each worker handles just one HTTP 
* request and then returns, which destroys the thread. This method
* assumes that whoever created the worker created it with a valid
* open socket object.
**/
public void run()
{
   System.err.println("Handling connection...");
   try {
      	InputStream  is = socket.getInputStream();
      	OutputStream os = socket.getOutputStream();
      	String path = readHTTPRequest(is);
	  	Boolean exists = checkForFile(path);
		String contentType = getContentType(path);
      	writeHTTPHeader(os,contentType,exists);
      	writeContent(os, path);
      	os.flush();
      	socket.close();
   } catch (Exception e) {
      	System.err.println("Output error: "+e);
   }
   System.err.println("Done handling connection.");
   return;
}
	
private boolean checkForFile(String path){
	File f = new File(path);
	if (f.exists()) return true;
	else return false;
}
	
private String getContentType(String input){
	Path path = Paths.get(input);
	String output = "";
	try{output = Files.probeContentType(path);}
	catch (IOException ex){
		System.err.println("Caught IOException: "+ex.getMessage());}
	System.out.println("OUTPUT: " + output);
	return output;
}

/**
* Read the HTTP request header.
**/
private String readHTTPRequest(InputStream is)
{
   	String line;
	String path = "";
   	BufferedReader r = new BufferedReader(new InputStreamReader(is));
   	while (true) {
      	try {
			while (!r.ready()) Thread.sleep(1);
         	line = r.readLine();
         	System.err.println("Request line: ("+line+")");
         	if (line.length()==0) break;
		  
		  	// check for request path
		  	String[] split = line.split(" ");
		  	if (split[0].equals("GET"))
				path = "."+split[1];
				System.err.println("Path: '"+path+"'");
				if (path.equals("./")) path = "./index.html";
		  
      	} catch (Exception e) {
         	System.err.println("Request error: "+e);
         	break;
      	}
   	}
	
   	return path;
}

/**
* Write the HTTP header lines to the client network connection.
* @param os is the OutputStream object to write to
* @param contentType is the string MIME content type (e.g. "text/html")
**/
private void writeHTTPHeader(OutputStream os, String contentType, Boolean fileFound) throws Exception
{
   Date d = new Date();
   DateFormat df = DateFormat.getDateTimeInstance();
   df.setTimeZone(TimeZone.getTimeZone("GMT"));
	if (fileFound) os.write("HTTP/1.1 200 OK\n".getBytes());
	else os.write("HTTP/1.1 404 Not Found\n".getBytes());
   os.write("Date: ".getBytes());
   os.write((df.format(d)).getBytes());
   os.write("\n".getBytes());
   os.write("Server: Jon's very own server\n".getBytes());
   //os.write("Last-Modified: Wed, 08 Jan 2003 23:11:55 GMT\n".getBytes());
   //os.write("Content-Length: 438\n".getBytes()); 
   os.write("Connection: close\n".getBytes());
   os.write("Content-Type: ".getBytes());
   os.write(contentType.getBytes());
   os.write("\n\n".getBytes()); // HTTP header ends with 2 newlines
   return;
}

/**
* Write the data content to the client network connection. This MUST
* be done after the HTTP header has been written out.
* @param os is the OutputStream object to write to
**/
private void writeContent(OutputStream os, String path) throws Exception
{
	Calendar cal = Calendar.getInstance();
	
	String date =	  (cal.get(Calendar.MONTH)+1) + "/"
					+  cal.get(Calendar.DAY_OF_MONTH) + "/"
					+  cal.get(Calendar.YEAR);
	
   File f = new File(path);
	if (f.exists()) {
		FileInputStream in = new FileInputStream(path);
		int c; while ((c = in.read()) != -1){os.write(c);}
	}
	else {
		os.write("<html><head></head><body>\n".getBytes());
		os.write("<h3>Error 404: File not found!</h3>\n".getBytes());
		os.write("</body></html>\n".getBytes());
	}
}

} // end class
